#!/bin/sh
### BEGIN INIT INFO
# Provides:          xray
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Xray service control
### END INIT INFO

XRAY_BIN="/opt/sbin/xray"
XRAY_CONF="/opt/etc/xray/config.json"
XRAY_LOG_DIR="/opt/var/log/xray"
XRAY_LOG_FILE="$XRAY_LOG_DIR/xray_output.log"
PID_FILE="/opt/var/run/xray.pid"
IPSET_FILE="/opt/etc/vpn_domains.ipset"

# веб морда
RAYWEB_DIR="/opt/bin/raygate/rayweb"
RAYWEB_LOG="$RAYWEB_DIR/rayweb.log"
RAYWEB_PID_FILE="/opt/var/run/rayweb.pid"

get_uptime() {
    pid="$1"
    if [ -f "/proc/$pid/stat" ]; then
        proc_start=$(awk '{print $22}' /proc/$pid/stat)
        hz=100
        sys_uptime=$(awk '{print int($1)}' /proc/uptime)
        proc_uptime=$(( sys_uptime - (proc_start / hz) ))
        printf "%dd %02dh %02dm %02ds" \
            $((proc_uptime/86400)) \
            $((proc_uptime%86400/3600)) \
            $((proc_uptime%3600/60)) \
            $((proc_uptime%60))
    fi
}

check_running() {
    if [ -f "$PID_FILE" ]; then
        pid=$(cat "$PID_FILE")
        if [ -n "$pid" ] && ps -p "$pid" >/dev/null 2>&1; then
            return 0
        fi
    fi
    if pgrep -f "$XRAY_BIN run" >/dev/null 2>&1; then
        return 0
    fi
    return 1
}

get_xray_pid() {
    if [ -f "$PID_FILE" ]; then
        pid=$(cat "$PID_FILE")
        if [ -n "$pid" ] && ps -p "$pid" >/dev/null 2>&1; then
            echo "$pid"
            return
        fi
    fi
    pgrep -f "$XRAY_BIN run" | head -n 1
}

warmup_ipset() {
    CONF_FILE="/opt/etc/dnsmasq.d/90-vpn-domains.conf"
    DNS_SERVER="127.0.0.1"
    DNS_PORT="5353"
    SET_NAME="vpn_domains"

    [ -f "$CONF_FILE" ] || { 
        echo "[RayGate] No $CONF_FILE found, skipping warmup."; 
        return
    }

    echo "[RayGate] Warming up IPSet..."
    grep -oP '(?<=ipset=/)[^/]+(?=/vpn_domains)' "$CONF_FILE" | sort -u | while read -r domain; do
        for ip in $(dig @"$DNS_SERVER" -p "$DNS_PORT" "$domain" A +short +time=3 +tries=1); do
            ipset add "$SET_NAME" "$ip" 2>/dev/null || true
        done
    done
    ipset save "$SET_NAME" > /opt/etc/vpn_domains.ipset
    echo "[RayGate] Warmup completed."
}

start_rayweb() {
    if pgrep -f "python3 $RAYWEB_DIR/rayweb.py" >/dev/null 2>&1; then
        echo "⚠️ RayWeb already running."
    else
        echo "Starting RayWeb..."
        cd "$RAYWEB_DIR" || exit
        python3 "$RAYWEB_DIR/rayweb.py" >> "$RAYWEB_LOG" 2>&1 &
        echo $! > "$RAYWEB_PID_FILE"
        sleep 1
        if pgrep -f "python3 $RAYWEB_DIR/rayweb.py" >/dev/null 2>&1; then
            echo "✅ RayWeb started with PID $(cat "$RAYWEB_PID_FILE")"
        else
            echo "❌ Failed to start RayWeb. Check $RAYWEB_LOG for details."
        fi
    fi
}

case "$1" in

enable)
    echo "Enabling RayGate to autostart..."
    ln -s "$0" /opt/etc/rc.d/S99raygate 
    ;;

disable)
    echo "Disabling RayGate from autostart..."
    rm -f /opt/etc/rc.d/S99raygate
    ;;

start)
    echo "Starting Xray..."

    if [ -f "$PID_FILE" ] && ! ps -p "$(cat "$PID_FILE")" >/dev/null 2>&1; then
      rm -f "$PID_FILE"
    fi

    if [ -s "$IPSET_FILE" ]; then
        echo "Restoring ipset vpn_domains from $IPSET_FILE..."
        ipset restore < "$IPSET_FILE"
    elif [ -s "/opt/etc/vpn_domains.ipset.backup" ]; then
        echo "Restoring ipset vpn_domains from backup..."
        ipset restore < /opt/etc/vpn_domains.ipset.backup
    else
        echo "⚠️ No ipset file or backup found. Skipping restore."
    fi

    if ! iptables -t nat -C PREROUTING -i br0 -p tcp -m set --match-set vpn_domains dst --dport 443 \
        -j REDIRECT --to-ports 12345 2>/dev/null; then
        iptables -t nat -A PREROUTING -i br0 -p tcp -m set --match-set vpn_domains dst --dport 443 \
        -j REDIRECT --to-ports 12345
        echo "✅ iptables rule added"
    else
        echo "⚠️ iptables rule already exists"
    fi

    if [ ! -x "$XRAY_BIN" ]; then
      echo "❌ Xray binary not found at $XRAY_BIN"
      exit 1
    fi

    $XRAY_BIN run -test -c "$XRAY_CONF" >/tmp/xray_test.log 2>&1
    if [ $? -ne 0 ]; then
      echo "❌ Config check failed! See /tmp/xray_test.log:"
      tail -n 20 /tmp/xray_test.log
      exit 1
    fi

    mkdir -p "$XRAY_LOG_DIR"
    rm -f "$XRAY_LOG_FILE"

    "$XRAY_BIN" run -c "$XRAY_CONF" >>"$XRAY_LOG_FILE" 2>&1 &
    echo $! > "$PID_FILE"

    sleep 2

    if check_running; then
      echo "✅ Xray started (PID: $(get_xray_pid))"
      start_rayweb
    else
      echo "❌ Xray failed to start. Last log lines:"
      tail -n 20 "$XRAY_LOG_FILE"
      rm -f "$PID_FILE"
      exit 1
    fi
    warmup_ipset
    ;;

  stop)
    echo "Stopping Xray..."
    if check_running; then
      echo "Killing all XRAY processes..."
      for pid in $(pgrep -f "$XRAY_BIN run"); do
        kill "$pid" 2>/dev/null
      done
      sleep 1
      if pgrep -f "$XRAY_BIN run" >/dev/null 2>&1; then
        echo "⚠️ Some XRAY processes still alive, killing forcefully..."
        pkill -9 -f "$XRAY_BIN run"
      fi
      rm -f "$PID_FILE"
      rm -f "$XRAY_LOG_FILE"
      echo "✅ Xray stopped"
    else
      echo "⚠️ Xray is not running"
    fi
    sleep 1
    ;;

  restart)
    $0 stop
    sleep 1
    $0 start
    ;;

  status)
    if check_running; then
      pid=$(get_xray_pid)
      echo "✅ Xray is running (PID: $pid, Uptime: $(get_uptime "$pid"))"
    else
      echo "⚠️ Xray is not running"
    fi

    if pgrep -f "rayweb.py" >/dev/null 2>&1; then
        wpid=$(pgrep -f "rayweb.py" | head -n1)
        echo "✅ rayweb is running (PID: $wpid, Uptime: $(get_uptime "$wpid"))"
    else
        echo "⚠️ rayweb is not running"
    fi

    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
    ;;
esac

