name: Build & Publish RayGate IPK

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # === 1. Клонируем репозиторий с тегом ===
      - name: Checkout repository
        uses: actions/checkout@v4

      # === 2. Извлекаем версию из тега и правим control ===
      - name: Set version from tag
        run: |
          VERSION="${GITHUB_REF##*/}"    # refs/tags/v1.0.0 → v1.0.0
          VERSION="${VERSION#v}"         # v1.0.0 → 1.0.0
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          sed -i "s/^Version:.*/Version: $VERSION/" raygate/CONTROL/control

      # === 3. Нормализуем control и postinst ===
      - name: Normalize control and postinst
        run: |
          sed -i '1s/^\xEF\xBB\xBF//' raygate/CONTROL/control
          sed -i 's/\r//g' raygate/CONTROL/control
          sed -i '1s/^\xEF\xBB\xBF//' raygate/CONTROL/postinst
          sed -i 's/\r//g' raygate/CONTROL/postinst
          chmod 755 raygate/CONTROL/postinst
          chmod 755 raygate/CONTROL/prerm

      # === 4. Подготавливаем build директории ===
      - name: Prepare build directories
        run: |
          rm -rf build
          mkdir -p build/CONTROL build/data

      # === 5. Копируем control и данные ===
      - name: Copy files into control and data
        run: |
          cp raygate/CONTROL/control build/CONTROL/
          cp raygate/CONTROL/postinst build/CONTROL/
          cp raygate/CONTROL/prerm build/CONTROL/
          cp -r raygate/opt/ build/data/

      # === 6. Создаём control.tar.gz и data.tar.gz ===
      - name: Build control.tar.gz and data.tar.gz
        run: |
          GZIP=-n tar --numeric-owner --group=0 --owner=0 -C build/CONTROL -czf build/control.tar.gz .
          GZIP=-n tar --numeric-owner --group=0 --owner=0 -C build/data    -czf build/data.tar.gz .

      # === 7. Создаём debian-binary ===
      - name: Create debian-binary
        run: printf '2.0\n' > build/debian-binary

      # === 8. Собираем IPK ===
      - name: Assemble .ipk
        run: |
          mkdir pkgroot
          cp build/debian-binary pkgroot/
          cp build/control.tar.gz pkgroot/
          cp build/data.tar.gz pkgroot/
          GZIP=-n tar -C pkgroot -czf raygate_${VERSION}_all.ipk .

      # === 9. Публикуем в GitHub Release ===
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: raygate_${{ env.VERSION }}_all.ipk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # === 10. Устанавливаем opkg-utils ===
      - name: Install opkg-utils
        run: |
          git clone https://git.yoctoproject.org/opkg-utils
          sudo make -C opkg-utils install

      # === 11. Чекаутим gh-pages для opkg фида ===
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages

      # === 12. Обновляем /all feed ===
      - name: Update /all feed
        run: |
          mkdir -p gh-pages/all
          cp raygate_${VERSION}_all.ipk gh-pages/all/
          cd gh-pages/all
          opkg-make-index . > Packages
          gzip -k Packages

      # === 13. Коммитим и пушим изменения в gh-pages ===
      - name: Commit & push gh-pages
        run: |
          cd gh-pages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add all/
          git commit -m "Update feed to v${VERSION}"
          git push origin gh-pages
